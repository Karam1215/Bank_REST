package com.example.bankcards.service;

import com.example.bankcards.JWT.JWTService;
import com.example.bankcards.cookies.CookieUtil;
import com.example.bankcards.dto.UserLoginDTO;
import com.example.bankcards.entity.User;
import com.example.bankcards.enums.Role;
import com.example.bankcards.exception.InvalidCredentialsException;
import com.example.bankcards.repository.UserRepository;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class AdminService {
    private final JWTService jwtService;
    private final CookieUtil cookieUtil;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;

/*
    public ResponseEntity<String> createAdmin(UserRegistrationDTO registrationDTO) {
        log.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} {}", registrationDTO.firstName(), registrationDTO.lastName());

        if (userRepository.findUserByEmail(registrationDTO.email()).isPresent()) {
            log.warn("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", registrationDTO.email());
            throw new EmailAlreadyExistException("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        User userToBeSaved = User.builder()
                .firstName(registrationDTO.firstName())
                .lastName(registrationDTO.lastName())
                .email(registrationDTO.email())
                .password(passwordEncoder.encode(registrationDTO.password()))
                .phoneNumber(registrationDTO.phoneNumber())
                .birthDate(registrationDTO.birthDate())
                .gender(registrationDTO.gender())
                .role(Role.USER)
                .build();

        userRepository.save(userToBeSaved);

        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {} {}", userToBeSaved.getFirstName(), userToBeSaved.getLastName());

        return new ResponseEntity<>("üéä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω." +
                " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –Ω–∞—á–Ω–∏—Ç–µ " +
                        "–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º! üöÄ", HttpStatus.CREATED);
    }
*/

    public ResponseEntity<String> loginForAdmin(UserLoginDTO userLoginDTO, HttpServletResponse response) {
        log.info("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ email: {}", userLoginDTO.email());

        User user = userRepository.findUserByEmail(userLoginDTO.email())
                .orElseThrow(() -> {
                    log.warn("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {}", userLoginDTO.email());
                    return new InvalidCredentialsException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
                });
        if (!user.getRole().equals(Role.ADMIN)) {
            throw new InvalidCredentialsException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(user.getUserId(), userLoginDTO.password())
        );

        String token = jwtService.generateAccessToken(user.getUserId(), String.valueOf(Role.ADMIN));
        log.info("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {} {}, Id: {}", user.getFirstName(), user.getLastName(), user.getUserId());

        cookieUtil.addAuthTokenCookie(response, token);
        return ResponseEntity.ok("üéä –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ cookie.");
    }

}
