package com.example.bankcards.service;

import com.example.bankcards.dto.CreateCardDTO;
import com.example.bankcards.entity.Card;
import com.example.bankcards.entity.User;
import com.example.bankcards.enums.Role;
import com.example.bankcards.exception.CardAlreadyExistException;
import com.example.bankcards.exception.InvalidCredentialsException;
import com.example.bankcards.mappers.CardMapper;
import com.example.bankcards.repository.CardRepository;
import com.example.bankcards.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class CardService {

    private final CardMapper cardMapper;
    private final CardRepository cardRepository;
    private final UserRepository userRepository;

    public ResponseEntity<String> createCard(CreateCardDTO createCardDTO) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String userId = authentication.getName();
        log.info("ID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞): {}", userId);
        UUID uuid = UUID.fromString(userId);

        User admin = userRepository.findUserByUserId(uuid)
                .orElseThrow(() -> new InvalidCredentialsException("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        log.info("–ê–¥–º–∏–Ω: {}", admin);

        if(!admin.getRole().equals(Role.ADMIN)) {
            throw new AccessDeniedException("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }

        if(cardRepository.findByCardNumber(createCardDTO.cardNumber()).isPresent()) {
            throw new CardAlreadyExistException("–ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        User user = userRepository.findById(createCardDTO.userId())
                .orElseThrow(() -> new InvalidCredentialsException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (createCardDTO.balance().compareTo(BigDecimal.ZERO) < 0) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: {}", createCardDTO.balance());
            throw new IllegalArgumentException("–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º");
        }

        Card card = Card.builder()
                .user(user)
                .cardNumber(createCardDTO.cardNumber())
                .expirationDate(createCardDTO.expirationDate())
                .balance(createCardDTO.balance())
                .status("ACTIVE")
                .createdBy(admin)
                .build();

        cardRepository.save(card);
        log.info("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å –Ω–æ–º–µ—Ä–æ–º {}", user.getUserId(), createCardDTO.cardNumber());

        return new ResponseEntity<>("üéä –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ üöÄ", HttpStatus.CREATED);
    }
}
